plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'app.android.newsapp'
    compileSdk 33

    defaultConfig {
        applicationId "app.android.newsapp"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField "String", 'BASE_URL', '"https://newsapi.org/v2/"'
        buildConfigField "String", 'API_KEY', '"3ff53327cab6426082d8cb63ee4f7b39"'


        testInstrumentationRunner "app.android.newsapp.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    configurations {
        all*.exclude module: 'conceal'
        all*.exclude module: 'bcprov-jdk15on'
        cleanedAnnotations
    }
    buildTypes {
        release { //production
            minifyEnabled true
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug { //dev
            debuggable true
        }

        applicationVariants.all {
                // this method is use to rename your all apk weather
                // it may be signed or unsigned(debug apk)
            variant ->
                variant.outputs.each {
                        // on below line we are setting a
                        // name to our apk as HealthierU.apk
                    output ->
                        def name = "NewsApp-v${defaultConfig.versionCode}-${variant.getName()}.apk"
                        // on below line we are setting the
                        // outputFile Name to our apk file.
                        output.outputFileName = name
                }
        }
    }

    flavorDimensions "newsAppEnv"
    productFlavors {

        sourceTechCrunch {
            buildConfigField "String", "SOURCE", '"techcrunch"'
            dimension "newsAppEnv"
        }

        sourceWallStreetJournal {
            buildConfigField "String", "SOURCE", '"the-wall-street-journal"'
            dimension "newsAppEnv"
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.3.2"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    hilt {
        enableAggregatingTask = false
    }

}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.material3.ExperimentalMaterial3Api"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.animation.ExperimentalAnimationApi"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.compose.ui.ExperimentalComposeUiApi"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=androidx.lifecycle.compose.ExperimentalLifecycleComposeApi"]
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.FlowPreview"]
}
dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Jetpack Compose
    def composeBom = platform('androidx.compose:compose-bom:2022.12.00')
    implementation composeBom
    androidTestImplementation composeBom

    implementation 'androidx.compose.material:material'
    implementation 'androidx.compose.foundation:foundation'
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    implementation "androidx.compose.runtime:runtime-livedata"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1"
    implementation "androidx.activity:activity-compose:1.6.1"

    implementation "com.google.accompanist:accompanist-systemuicontroller:0.28.0"

    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Compose constraint layout
    implementation "androidx.constraintlayout:constraintlayout-compose:1.1.0-alpha05"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"



    //Security
    implementation "androidx.security:security-crypto:1.0.0"

    // Retrofit
    def retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:4.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.3"

    // Lifecycle components
    def lifecycle_version = '2.5.1'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.0-alpha03"

    // Kotlin Coroutines
    def coroutines_version = '1.6.4'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"


    // Test dependencies
    testImplementation "androidx.test:core:1.5.0"
    testImplementation "com.google.truth:truth:1.1.2"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "com.google.dagger:hilt-android-testing:2.44.2"

    androidTestImplementation "androidx.test:core:1.5.0"
    androidTestImplementation "com.google.truth:truth:1.1.2"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation "com.google.dagger:hilt-android-testing:2.44.2"

    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    implementation "androidx.biometric:biometric:1.1.0"

    // Coil
    implementation("io.coil-kt:coil-compose:2.2.2")
    implementation "com.google.accompanist:accompanist-coil:0.10.0"
    implementation "com.google.accompanist:accompanist-swiperefresh:0.21.0-beta"


}

kapt {
    correctErrorTypes = true
}